{"name":"JSKlass","tagline":"Create classes with prototype, static attributes, mixins in JavaScript and extend them","body":"# JSKlass\r\n\r\n![Build Status](https://img.shields.io/travis/ghaiklor/jsklass.svg) ![Coverage](https://img.shields.io/coveralls/ghaiklor/jsklass.svg) ![Downloads](https://img.shields.io/npm/dm/jsklass.svg) ![npm version](https://img.shields.io/npm/v/jsklass.svg) ![dependencies](https://img.shields.io/david/ghaiklor/jsklass.svg) ![dev dependencies](https://img.shields.io/david/dev/ghaiklor/jsklass.svg) ![License](https://img.shields.io/npm/l/jsklass.svg)\r\n\r\nCreate classes with prototype object, static properties and mixins in JavaScript.\r\n\r\n## Getting Started\r\n\r\nInstall `jsklass` module.\r\n\r\n```shell\r\nnpm install jsklass\r\n```\r\n\r\nInclude ```jsklass``` and you can start work with it.\r\n\r\n```javascript\r\nvar Class = require('jsklass');\r\n\r\nvar Basic = Class.create();\r\nvar Extended = Basic.extend();\r\n```\r\n\r\nFor example, you can create Animal class and extend it with Cat class.\r\n\r\n```javascript\r\nvar Animal = Class.create({\r\n    init: function() {\r\n        this.type = \"Animal\";\r\n    },\r\n\r\n    getType: function() {\r\n        return this.type;\r\n    }\r\n});\r\n\r\nvar Cat = Animal.extend({\r\n    init: function() {\r\n        this.type = \"Cat\";\r\n    }\r\n});\r\n\r\nvar justAnimal = new Animal();\r\njustAnimal.getType(); // Animal\r\n\r\nvar justCat = new Cat();\r\njustCat.getType(); // Cat\r\n```\r\n\r\n## API\r\n\r\nAPI has simple method. When you create Class you call `create` method of Class object.\r\n\r\nIf you want extends then call `extend` in existing class.\r\n\r\n```javascript\r\nvar result = Class.create(prototype, staticProperties, [mixinsArray]);\r\nresult.extend(prototype, staticProperties, [mixinsArray]);\r\n```\r\n\r\n## Examples\r\n\r\nWorking example you can find [here](./examples).\r\n\r\n### Basic creating and extending\r\n\r\n```javascript\r\nvar BasicClass = Class.create(); // BasicClass -> Object\r\nvar ExtendedClass = BasicClass.extend(); // ExtendedClass -> BasicClass -> Object\r\nvar MoreExtendedClass = ExtendedClass.extend(); // MoreExtendedClass -> ExtendedClass -> BasicClass -> Object\r\n```\r\n\r\n### Creating classes with methods and attributes and extend them\r\n\r\n```javascript\r\nvar Class = require('../');\r\n\r\nvar BasicClass = Class.create({\r\n    type: \"Basic\",\r\n\r\n    init: function () {\r\n        this.foo = \"bar\";\r\n    },\r\n\r\n    getType: function () {\r\n        return this.type;\r\n    }\r\n});\r\n\r\nvar ExtendedClass = BasicClass.extend({\r\n    type: \"ExtendedClass\",\r\n\r\n    init: function () {\r\n        this.bar = \"foo\";\r\n    }\r\n});\r\n\r\nvar MoreClass = BasicClass.extend({\r\n    type: \"MoreClass\"\r\n});\r\n\r\nvar basic = new BasicClass();\r\nconsole.log(basic.getType()); // Basic\r\nconsole.log(basic.foo); // bar\r\n\r\nvar extended = new ExtendedClass();\r\nconsole.log(extended.getType()); // ExtendedClass\r\nconsole.log(extended.foo); // undefined\r\nconsole.log(extended.bar); // foo\r\n\r\nvar more = new MoreClass();\r\nconsole.log(more.getType()); // MoreClass\r\nconsole.log(more.foo); // bar\r\nconsole.log(more.bar); // undefined\r\n```\r\n\r\n### Creating classes with prototype and static methods\r\n\r\n```javascript\r\nvar BasicClass = Class.create({}, {\r\n    staticFoo: 'bar'\r\n});\r\n\r\nvar ExtendedClass = BasicClass.extend({}, {\r\n    staticBar: 'foo'\r\n});\r\n\r\nconsole.log(BasicClass.staticFoo); // bar\r\nconsole.log(BasicClass.staticBar); // undefined\r\n\r\nconsole.log(ExtendedClass.staticFoo); // undefined\r\nconsole.log(ExtendedClass.staticBar); // foo\r\n```\r\n\r\n### Creating classes with prototype, static and mixins\r\n\r\n```javascript\r\nvar Class = require('../');\r\n\r\nvar EventEmitterMixin = {\r\n    on: function () {\r\n        return \"on\";\r\n    },\r\n\r\n    off: function () {\r\n        return \"off\";\r\n    },\r\n\r\n    emit: function () {\r\n        return \"emit\";\r\n    }\r\n};\r\n\r\nvar OtherMixin = {\r\n    other: function () {\r\n        return \"Other\";\r\n    }\r\n};\r\n\r\nvar EventEmitter = Class.create({}, {}, [EventEmitterMixin]);\r\nvar EventEmitterAndOther = Class.create({}, {}, [EventEmitterMixin, OtherMixin]);\r\n\r\nvar event = new EventEmitter();\r\nconsole.log(event.on()); // on\r\nconsole.log(event.off()); // off\r\nconsole.log(event.emit()); // emit\r\nconsole.log(event.other); // undefined\r\n\r\nvar otherEvent = new EventEmitterAndOther();\r\nconsole.log(otherEvent.on()); // on\r\nconsole.log(otherEvent.off()); // off\r\nconsole.log(otherEvent.emit()); // emit\r\nconsole.log(otherEvent.other()); // Other\r\n```\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright Â© 2015 Eugene Obrezkov\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"UA-45808486-2","note":"Don't delete this file! It's used internally to help with page regeneration."}